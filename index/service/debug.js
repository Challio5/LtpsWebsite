// Generated by CoffeeScript 1.10.0
(function() {
  var DebugService,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  angular.module('app').service('debug', DebugService = (function() {
    DebugService.$inject = ['$routeParams', '$log', '$mdDialog', '$mdToast', 'user'];

    function DebugService(routeParams, log, mdDialog, mdToast, user) {
      this.routeParams = routeParams;
      this.log = log;
      this.mdDialog = mdDialog;
      this.mdToast = mdToast;
      this.user = user;
      this.orderPush = bind(this.orderPush, this);
      this.deleteOrder = bind(this.deleteOrder, this);
      this.deleteProductOrder = bind(this.deleteProductOrder, this);
      this.productPush = bind(this.productPush, this);
      this.categoryPush = bind(this.categoryPush, this);
      this.login = bind(this.login, this);
      this.debug = true;
    }


    /* Login debug */

    DebugService.prototype.login = function() {
      this.user.loggedUser.userId = 999;
      this.user.loggedUser.name = 'admin';
      this.user.currentUser.userId = 999;
      this.user.currentUser.name = 'admin';
      this.user.currentUser.email = 'admin@admin.com';
      this.user.currentUser.telephone = '123456789';
      this.user.currentUser.username = 'admin';
      this.user.currentUser.password = 'pass';
      this.user.currentUser.balance = 10.0;
      this.user.currentUser.enabled = true;
      this.user.currentUser.nfcCards = [
        {
          cardId: 1237657
        }, {
          cardId: 2345897
        }, {
          cardId: 1329487
        }
      ];
      return this.mdDialog.hide();
    };


    /* Category debug */

    DebugService.prototype.categoryPush = function(categories) {
      categories.push({
        src: 'img/soda.png',
        name: 'Soda',
        productCategoryId: -1
      });
      categories.push({
        src: 'img/hamburger.png',
        name: 'Food',
        productCategoryId: -2
      });
      categories.push({
        src: 'img/salad.ico',
        name: 'Salat',
        productCategoryId: 0
      });
      return categories.push({
        src: 'img/candy.png',
        name: 'Candy',
        productCategoryId: 0
      });
    };


    /* Product debug */

    DebugService.prototype.productPush = function(products) {
      if (this.routeParams.categoryId === '-2') {
        products.push({
          productId: -1,
          name: "Fries",
          description: "Puntzak frites",
          price: 1.5,
          productCategoryId: this.routeParams.categoryID,
          src: 'img/food/fries.jpeg'
        });
        return products.push({
          productId: -2,
          name: "Hamburger",
          description: "Broodje Hamburger",
          price: 2.4,
          productCategoryId: this.routeParams.categoryID,
          src: 'img/food/hamburger.jpg'
        });
      } else if (this.routeParams.categoryId === '-1') {
        products.push({
          productId: -3,
          name: "Fanta",
          description: "Blikje Fanta",
          price: 1.8,
          productCategoryId: this.routeParams.categoryID,
          src: 'img/drinks/fanta.jpg'
        });
        return products.push({
          productId: -4,
          name: "Cola",
          description: "Blikje Cola",
          price: 2.2,
          productCategoryId: this.routeParams.categoryID,
          src: 'img/drinks/cola.jpg'
        });
      }
    };


    /* Cart debug */


    /* Order debug */

    DebugService.prototype.deleteProductOrder = function(orders, orderIndex, productOrderIndex) {
      var dialog;
      dialog = this.mdDialog.confirm({
        title: 'Attention',
        content: 'You are about to remove all: ' + orders[orderIndex]._embedded.productOrders[productOrderIndex].id,
        ok: 'OK',
        cancel: 'Cancel'
      });
      return this.mdDialog.show(dialog).then((function(_this) {
        return function() {
          var productOrder, toast;
          _this.log.debug('User removes productOrder');
          productOrder = orders[orderIndex]._embedded.productOrders.splice(productOrderIndex, 1);
          toast = _this.mdToast.simple().content('Products deleted: ' + productOrder[0].product.name).hideDelay(1000).position("top right");
          _this.mdToast.show(toast);
          if (orders[orderIndex]._embedded.productOrders.length === 0) {
            return _this.deleteOrder(orderIndex);
          }
        };
      })(this), (function(_this) {
        return function() {
          return _this.log.debug('User cancels to remove a productOrder');
        };
      })(this));
    };

    DebugService.prototype.deleteOrder = function(orders, index) {
      var dialog;
      dialog = this.mdDialog.confirm({
        title: 'Attention',
        content: 'You are about to delete order with id: ' + orders[index].orderId,
        ok: 'OK',
        cancel: 'Cancel'
      });
      return this.mdDialog.show(dialog).then((function(_this) {
        return function() {
          var order, toast;
          _this.log.debug('User removes order');
          order = orders.splice(index, 1);
          toast = _this.mdToast.simple().content('Order deleted with id: ' + order[0].orderId).hideDelay(1000).position("top right");
          return _this.mdToast.show(toast);
        };
      })(this), (function(_this) {
        return function() {
          return _this.log.debug('User cancels to remove order');
        };
      })(this));
    };

    DebugService.prototype.orderPush = function(orders) {
      orders.push({
        orderId: -9,
        show: false,
        statusId: 1,
        _embedded: {
          productOrders: [
            {
              product: {
                id: -99,
                name: 'Cola'
              },
              amount: 1,
              price: 1.5
            }, {
              product: {
                id: -88,
                name: 'Patat'
              },
              amount: 5,
              price: 2.8
            }, {
              product: {
                id: -11,
                name: 'Hamburger'
              },
              amount: 3,
              price: 3.5
            }
          ]
        }
      });
      return orders.push({
        orderId: -10,
        show: false,
        statusId: 2,
        _embedded: {
          productOrders: [
            {
              product: {
                id: -99,
                name: 'Cola'
              },
              amount: 3,
              price: 1.5
            }, {
              product: {
                id: -33,
                name: 'Snoep'
              },
              amount: 2,
              price: 0.7
            }, {
              product: {
                id: -22,
                name: 'Bamischijf'
              },
              amount: 6,
              price: 2.2
            }
          ]
        }
      });
    };


    /* Credit debug */


    /* Settings debug */

    return DebugService;

  })());

}).call(this);

//# sourceMappingURL=debug.js.map
