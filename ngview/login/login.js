// Generated by CoffeeScript 1.10.0
(function() {
  var LoginController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  angular.module('app').controller('loginCtrl', LoginController = (function() {
    LoginController.$inject = ['$scope', '$http', '$log', '$mdDialog', 'user', 'server', 'debug'];

    function LoginController(scope, http, log, mdDialog, user, server, debug) {
      this.scope = scope;
      this.http = http;
      this.log = log;
      this.mdDialog = mdDialog;
      this.user = user;
      this.server = server;
      this.debug = debug;
      this.addUser = bind(this.addUser, this);
      this.login = bind(this.login, this);
      this.redirectLogin = bind(this.redirectLogin, this);
      this.scope.user = this.user;
      this.scope.login = this.login;
      this.scope.telephone = "(\\\\+|04)[0-9]+";
      this.scope.login = {
        username: '',
        password: ''
      };
      this.scope.show = false;
      angular.extend(this.scope, {
        redirectLogin: this.redirectLogin,
        login: this.login,
        addUser: this.addUser
      });
    }

    LoginController.prototype.redirectLogin = function(keyEvent) {
      if (keyEvent.which === 13 && this.scope.loginForm.$invalid === false) {
        return this.login();
      }
    };

    LoginController.prototype.login = function() {
      var url;
      if (this.debug.debug === true) {
        return this.debug.login();
      } else {
        url = 'http://' + this.server.serverIp + ':' + this.server.port + '/user/search/findByUsernameAndPassword?user_name=' + this.scope.login.username + "&password=" + this.scope.login.password;
        this.log.debug('Preform GET request for user with url: ' + url);
        return this.http.get(url).then((function(_this) {
          return function(response) {
            _this.log.debug('Response of GET request: ');
            _this.log.debug(response);
            if (response.data.hasOwnProperty("_embedded")) {
              angular.forEach(response.data._embedded.user[0], function(value, key) {
                _this.user.loggedUser[key] = value;
                return _this.user.currentUser[key] = value;
              });
              return _this.mdDialog.hide();
            } else {
              return _this.log.debug('User does not exist');
            }
          };
        })(this), (function(_this) {
          return function(response) {
            _this.log.debug('Error message');
            return _this.log.debug(response);
          };
        })(this));
      }
    };

    LoginController.prototype.addUser = function() {
      var url;
      if (!this.debug.debug) {
        url = 'http://' + this.server.serverIp + ':' + this.server.port + '/user';
        this.log.debug('Preform POST request for adding user with url: ' + url);
        this.log.debug('Preform POST request for user with data: ');
        this.log.debug(this.user.currentUser);
        return this.http.post(url, this.user.currentUser).success((function(_this) {
          return function(data, status, headers, config) {
            var userId;
            userId = headers('Location').split('/').pop();
            _this.log.debug('Respons of POST request with returned headers: ');
            _this.log.debug(headers());
            _this.user.currentUser.userId = userId;
            _this.user.loggedUser = _this.user.currentUser;
            return _this.mdDialog.hide();
          };
        })(this));
      }
    };

    return LoginController;

  })());

}).call(this);

//# sourceMappingURL=login.js.map
