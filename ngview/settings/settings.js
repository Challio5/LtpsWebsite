// Generated by CoffeeScript 1.10.0
(function() {
  var DataController,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  angular.module('app').controller('dataCtrl', DataController = (function() {
    DataController.$inject = ['$scope', '$http', '$log', 'user', 'server', 'debug'];

    function DataController(scope, http, log, user, server, debug) {
      this.scope = scope;
      this.http = http;
      this.log = log;
      this.user = user;
      this.server = server;
      this.debug = debug;
      this.removeNfcCard = bind(this.removeNfcCard, this);
      this.editModeOff = bind(this.editModeOff, this);
      this.edit = bind(this.edit, this);
      this.scope.editMode = {
        index: -1,
        key: ''
      };
      this.scope.editable = ['name', 'email', 'telephone', 'password'];
      angular.extend(this.scope, {
        edit: this.edit,
        editModeOff: this.editModeOff,
        removeNfcCard: this.removeNfcCard
      });
    }

    DataController.prototype.edit = function(index, key) {
      this.scope.editMode.index = index;
      return this.scope.editMode.key = key;
    };

    DataController.prototype.editModeOff = function(keyEvent) {
      var data;
      if (keyEvent.which === 13) {
        data = "{\"" + this.scope.editMode.key + "\" : \"" + this.user.currentUser[this.scope.editMode.key] + "\"}";
        this.scope.editMode.index = -1;
        this.scope.editMode.key = '';
        if (!this.debug.debug) {
          this.log.debug('Preform PATCH request for updating userdata with url: ' + this.user.currentUser._links.self.href.split('{')[0]);
          this.log.debug('Preform PATCH request for updating orderamount with data: ');
          this.log.debug(data);
          return this.http.patch(this.user.currentUser._links.self.href.split('{')[0], data).success((function(_this) {
            return function(data, status, headers, config) {
              _this.log.debug('Respons of PATCH request with returned headers: ');
              return _this.log.debug(headers());
            };
          })(this));
        }
      }
    };

    DataController.prototype.removeNfcCard = function(index) {
      var url;
      if (this.debug.debug) {
        return this.user.currentUser.nfcCards.splice(index, 1);
      } else {
        url = 'http://' + this.server.serverIp + ':' + this.server.port + '/nfc_card/' + this.user.currentUser.nfcCards[index].cardId;
        this.log.debug('Preform DELETE request for deleting order with url: ' + url);
        return this.http["delete"](url).success((function(_this) {
          return function(data, status, headers, config) {
            return _this.user.currentUser.nfcCards.splice(index, 1);
          };
        })(this));
      }
    };

    return DataController;

  })());

}).call(this);

//# sourceMappingURL=settings.js.map
